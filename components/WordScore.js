// Generated by CoffeeScript 1.12.4
(function() {
  var natural, noflo, tokenizer,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  noflo = require('noflo');

  natural = require('natural');

  tokenizer = new natural.WordTokenizer();

  exports.getComponent = function() {
    var c;
    c = new noflo.Component({
      description: 'Find how the input words compare against the list of weighted words',
      inPorts: {
        list: {
          datatype: 'array',
          description: 'list of words we will use with the list of content',
          control: true,
          required: true
        },
        content: {
          datatype: 'string',
          description: 'the content which we will determine the score of',
          required: true
        }
      },
      outPorts: {
        score: {
          datatype: 'number',
          description: 'the resulting number of comparing the content with the list',
          required: true
        }
      }
    });
    c.forwardBrackets = {
      list: 'out',
      content: 'out'
    };
    return c.process(function(input, output) {
      var content, contents, data, i, len, list, nounInflector, plural, ref, score, scoringFunction, singular, spellingScore, wordScore;
      if (!input.has('list', 'content', function(ip) {
        return ip.type === 'data';
      })) {
        return;
      }
      content = ((input.getStream('content').filter(function(ip) {
        return ip.type === 'data';
      })).map(function(ip) {
        return ip.data;
      }))[0];
      list = input.getStream('list')[0].data;
      score = 0;
      contents = tokenizer.tokenize(content);
      wordScore = function(word) {
        if (list[word] != null) {
          return list[word];
        } else {
          return 0;
        }
      };
      spellingScore = function(word) {
        var comparison, i, len;
        for (i = 0, len = list.length; i < len; i++) {
          comparison = list[i];
          if (indexOf.call(comparison["American"], word) < 0) {
            if (indexOf.call(comparison["Canadian"], word) >= 0) {
              return 1;
            } else if (indexOf.call(comparison["British"], word) >= 0) {
              return 0.5;
            }
          } else {
            return -1;
          }
        }
        return 0;
      };
      if (((ref = list[0]) != null ? ref["Canadian"] : void 0) != null) {
        scoringFunction = spellingScore;
      } else {
        scoringFunction = wordScore;
      }
      nounInflector = new natural.NounInflector();
      for (i = 0, len = contents.length; i < len; i++) {
        data = contents[i];
        plural = nounInflector.pluralize(data);
        singular = nounInflector.singularize(data);
        if (plural !== data) {
          score += scoringFunction(plural);
        }
        if (singular !== data) {
          score += scoringFunction(singular);
        }
        score += scoringFunction(data);
      }
      return output.sendDone({
        score: score
      });
    });
  };

}).call(this);
