// Generated by CoffeeScript 1.12.4
(function() {
  var findMode, noflo,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  noflo = require('noflo');

  findMode = function(array) {
    var frequency, maxFrequency, result, v;
    frequency = {};
    maxFrequency = 0;
    result = void 0;
    for (v in array) {
      frequency[array[v]] = (frequency[array[v]] || 0) + 1;
      if (frequency[array[v]] > maxFrequency) {
        maxFrequency = frequency[array[v]];
        result = array[v];
      }
    }
    return result;
  };

  exports.getComponent = function() {
    var c;
    c = new noflo.Component({
      description: 'Find all of the instances of `word` in `content` and send them out in a stream',
      inPorts: {
        content: {
          datatype: 'string',
          description: 'the content which we look for the word in',
          required: true
        }
      },
      outPorts: {
        emotion: {
          datatype: 'string',
          description: 'the emotion based the content in ehs',
          required: true
        },
        error: {
          datatype: 'object'
        }
      }
    });
    return c.process(function(input, output) {
      var content, contents, data, emotion, emotions, i, len, matches, mode;
      if (!input.hasStream('content')) {
        return;
      }
      contents = input.getStream('content');
      contents = contents.filter(function(ip) {
        return ip.type === 'data';
      });
      contents = contents.map(function(ip) {
        return ip.data;
      });
      matches = [];
      emotions = {
        joy: ['eh!'],
        neutral: ['eh'],
        amusement: ['eh?', 'Eh?', 'Eh??'],
        fear: ['eH??', 'eh??'],
        surprise: ['ehÂ !?', 'EH!?'],
        anticipation: ['eh?!'],
        excitment: ['EH!', 'eH!'],
        sadness: ['...eh', '...eh...', '..eh', 'eh..', '..eh..'],
        anger: ['EH!?', 'EH?']
      };
      for (i = 0, len = contents.length; i < len; i++) {
        content = contents[i];
        for (emotion in emotions) {
          data = emotions[emotion];
          if (indexOf.call(data, content) >= 0) {
            matches.push(emotion);
          }
        }
      }
      if (matches.length === 0) {
        mode = 'neutral';
      } else {
        mode = findMode(matches);
      }
      return output.sendDone({
        emotion: mode
      });
    });
  };

}).call(this);
